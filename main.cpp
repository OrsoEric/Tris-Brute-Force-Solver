/****************************************************************
**	OrangeBot Project
*****************************************************************
**        /
**       /
**      /
** ______ \
**         \
**          \
*****************************************************************
**	Project
*****************************************************************
**  Brief
****************************************************************/

/****************************************************************
**	DESCRIPTION
****************************************************************
**
****************************************************************/

/****************************************************************
**	HISTORY VERSION
****************************************************************
**
****************************************************************/

/****************************************************************
**	KNOWN BUGS
****************************************************************
**
****************************************************************/

/****************************************************************
**	TODO
****************************************************************
**
****************************************************************/

/****************************************************************
**	INCLUDES
****************************************************************/

//Standard C Libraries
#include <cstdio>
//#include <cstdlib>
//Standard C++ libraries
#include <iostream>
#include <vector>

//Tris game class
#include "tris.h"
//Include user log trace
#include "debug.h"

/****************************************************************
**	NAMESPACES
****************************************************************/

//Never use a whole namespace. Use only what you need from it.
using std::cout;
using std::endl;

using User::Tris;

/****************************************************************
**	DEFINES
****************************************************************/

/****************************************************************
**	MACROS
****************************************************************/

/****************************************************************
**	PROTOTYPES
****************************************************************/

/****************************************************************
**	GLOBAL VARIABILES
****************************************************************/

//User::Dummy my_class;

/****************************************************************
**	FUNCTIONS
****************************************************************/

/****************************************************************
**	MAIN
****************************************************************
**	INPUT:
**	OUTPUT:
**	RETURN:
**	DESCRIPTION:
****************************************************************/

int main()
{
	///----------------------------------------------------------------
	///	STATIC VARIABILE
	///----------------------------------------------------------------

	///----------------------------------------------------------------
	///	LOCAL VARIABILE
	///----------------------------------------------------------------

	///----------------------------------------------------------------
	///	CHECK AND INITIALIZATIONS
	///----------------------------------------------------------------

	//Start Debugging. Show function nesting level 1 and below
	DSTART( 3 );
	//Trace Enter main
	DENTER();

	///----------------------------------------------------------------
	///	BODY
	///----------------------------------------------------------------

	printf("OrangeBot Projects\n");
	//print in the 'debug.log' file. works just like a fully featured printf
	DPRINT("OrangeBot Projects\n");

	Tris my_game;

	//my_game = Tris();


	/*
	//Test victory
	my_game.set_board("OXOXXOXOO");

	my_game.show_board();
	my_game.get_num_moves();

	my_game.at( 0, 0 ) = User::Pieces::CIRCLE;
	my_game.at( 0, 1 ) = User::Pieces::CROSS;
	my_game.at( 0, 2 ) = User::Pieces::CIRCLE;
	my_game.at( 1, 0 ) = User::Pieces::CROSS;
	my_game.at( 1, 1 ) = User::Pieces::CROSS;
	my_game.at( 1, 2 ) = User::Pieces::CIRCLE;
	my_game.at( 2, 0 ) = User::Pieces::CIRCLE;
	my_game.at( 2, 1 ) = User::Pieces::CIRCLE;
	my_game.at( 2, 2 ) = User::Pieces::CROSS;

	my_game.get_victor();
	my_game.is_finished();
	*/

	my_game.generate_moves();

	my_game.save( "Tris.log" );

	//It gives a violation of memory access after deallocator is done if i explicitely deallocate
	//cout << "DEALLOCATE\n";
	//my_game.~Tris();
	//my_game = Tris();
	cout << "DONE\n";

	///----------------------------------------------------------------
	///	FINALIZATIONS
	///----------------------------------------------------------------

	//Trace Return from main
	DRETURN();
	//Stop Debugging
	DSTOP();

    return 0;
}	//end function: main

/****************************************************************************
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

void f( void )
{
	///--------------------------------------------------------------------------
	///	STATIC VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	LOCAL VARIABILE
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	CHECK
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	INITIALIZATIONS
	///--------------------------------------------------------------------------

	//Trace Enter with arguments
	DENTER_ARG("in: %d\n", 0);

	///--------------------------------------------------------------------------
	///	BODY
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	FINALIZATIONS
	///--------------------------------------------------------------------------

	///--------------------------------------------------------------------------
	///	RETURN
	///--------------------------------------------------------------------------

	//Trace Return vith return value
	DRETURN_ARG("out: %d\n", 0);

	return;
}	//end function:
